import tkinter as tk
from tkinter import messagebox, simpledialog
import random
import string
import hashlib
from cryptography.fernet import Fernet
import os

key_file = "key.txt"
hash_file = "hash.txt"
passwords_file = "passwords.txt"

master_password_entered = False
cipher_suite = None

def generate_or_load_key():
    global cipher_suite

    try:
        with open(key_file, "rb") as file:
            key = file.read()
    except FileNotFoundError:
        key = Fernet.generate_key()
        with open(key_file, "wb") as file:
            file.write(key)

    cipher_suite = Fernet(key)

def encrypt_password(password):
    return cipher_suite.encrypt(password.encode())

def decrypt_password(encrypted_password):
    return cipher_suite.decrypt(encrypted_password).decode()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def create_master_password():
    global master_password_entered

    new_password = simpledialog.askstring("Create Master Password", "Create your master password:", show='*')
    hashed_password = hash_password(new_password)
    with open(hash_file, "w") as file:
        file.write(hashed_password)
    messagebox.showinfo("Success", "Master password created successfully.")
    master_password_entered = True

def check_master_password():
    global master_password_entered

    if not os.path.exists(hash_file):
        create_master_password()
    else:
        if not master_password_entered:
            entered_password = simpledialog.askstring("Enter Master Password", "Enter your master password:", show='*')
            stored_hash = ""
            with open(hash_file, "r") as file:
                stored_hash = file.read().strip()

            if hash_password(entered_password) == stored_hash:
                master_password_entered = True
            else:
                messagebox.showerror("Authentication Failed", "Incorrect master password.")
                root.destroy()

def generate_password():
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(12))
    password_entry.delete(0, tk.END)
    password_entry.insert(0, password)

def save_password():
    global master_password_entered

    if not master_password_entered:
        check_master_password()

    label = simpledialog.askstring("Label", "What is this password for?")
    username = simpledialog.askstring("Username", "What is the username that will go with this password?")
    if label and username:
        password = password_entry.get()
        encrypted_password = encrypt_password(password)
        with open(passwords_file, "ab") as file:
            file.write(f"{label}:{username}:".encode() + encrypted_password + b'\n')
        messagebox.showinfo("Success", "Password saved successfully.")

def view_passwords():
    global master_password_entered

    if not master_password_entered:
        check_master_password()

    try:
        passwords_window = tk.Toplevel(root)
        passwords_window.title("Saved Passwords")

        with open(passwords_file, "rb") as file:
            passwords = file.readlines()
            for index, encrypted_password in enumerate(passwords):
                label, username, encrypted_password = encrypted_password.strip().split(b":")
                password_value = decrypt_password(encrypted_password)
                password_info = f"Service: {label.decode()} | Username: {username.decode()} | Password: {password_value}"

                password_label = tk.Label(passwords_window, text=password_info)
                password_label.grid(row=index, column=0, padx=10, pady=5, sticky="w")

                copy_button = tk.Button(passwords_window, text="Copy", command=lambda p=password_value: copy_specific_to_clipboard(p))
                copy_button.grid(row=index, column=1, padx=5, pady=5)

                delete_button = tk.Button(passwords_window, text="Delete", command=lambda p=encrypted_password: delete_password(encrypted_password, passwords_window))
                delete_button.grid(row=index, column=2, padx=5, pady=5)

    except FileNotFoundError:
        messagebox.showinfo("No Passwords", "No passwords saved yet.")

def delete_password(encrypted_password, window):
    global master_password_entered

    if not master_password_entered:
        check_master_password()

    if messagebox.askyesno("Delete Password", "Are you sure you want to delete this password?"):
        with open(passwords_file, "rb") as file:
            lines = file.readlines()
        with open(passwords_file, "wb") as file:
            for line in lines:
                if line.strip().split(b":")[2] != encrypted_password:
                    file.write(line)
        window.destroy()

def delete_password_file():
    global master_password_entered

    if not master_password_entered:
        check_master_password()

    if messagebox.askyesno("Delete Password File", "Are you sure you want to delete the password file?"):
        os.remove(passwords_file)
        messagebox.showinfo("Success", "Password file deleted successfully.")

def copy_specific_to_clipboard(password):
    root.clipboard_clear()
    root.clipboard_append(password)

root = tk.Tk()
root.title("LLSPM")

generate_or_load_key()

check_master_password()

password_label = tk.Label(root, text="Password:")
password_label.pack(pady=10)

password_entry = tk.Entry(root, width=30)
password_entry.pack(pady=10)

generate_button = tk.Button(root, text="Generate Password", command=generate_password)
generate_button.pack(pady=10)

save_button = tk.Button(root, text="Save Password", command=save_password)
save_button.pack(pady=10)

view_button = tk.Button(root, text="View Passwords", command=view_passwords)
view_button.pack(pady=10)

delete_button = tk.Button(root, text="Delete Password File", command=delete_password_file, fg="red")
delete_button.pack(pady=10)

root.mainloop()
